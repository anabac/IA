%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pertenece_m(X, [X|_]) :- X \= [_|_].
pertenece_m(X, [L|_]) :- pertenece_m(X, L).
pertenece_m(X, [_|Rs]) :- pertenece_m(X, Rs).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
concatena([], L, L).
concatena([X|L1], L2, [X|L3]) :-
    concatena(L1, L2, L3).

invierte([], []).
invierte([X|L], L1) :- invierte(L, L2), concatena(L2, [X], L1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 3
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
insert([X-P], [], [X-P]).
insert([X-P], [X1-P1|Rs], [X-P|[X1-P1|Rs]]) :- P =< P1.
insert([X-P], [X1-P1|Rs], [X1-P1|L]) :- P > P1, insert([X-P], Rs, L).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 4.1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
elem_count(_, [], 0).
elem_count(X, [X|Rs], Xn) :- elem_count(X, Rs, Xm), Xn is Xm + 1.
elem_count(X, [Y|Rs], Xn) :- X \= Y, elem_count(X, Rs, Xn).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 4.2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
list_count([], _, []).
list_count([X|L1], L2, [X-Cx|L3]) :- elem_count(X, L2, Cx), list_count(L1, L2, L3).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sort_list([], []).
sort_list([X-P|Rs], L2) :- sort_list(Rs, L), insert([X-P], L, L2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 6
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
build_tree([], tree(1, nil, nil)).
build_tree([X-_], tree(X, nil, nil)).
build_tree([X-_|Rs], tree(1, tree(X, nil, nil), T)) :- Rs \= [], build_tree(Rs, T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 7.1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
encode_elem(X, [0], tree(_, tree(X, _, _), _)).
encode_elem(X, [1], tree(_, _, tree(X, _, _))).
encode_elem(X, [1|R], tree(_, tree(Y, _, _), tree(Z, Tl, Tr))) :- Y \= X, Z\= X, encode_elem(X, R, tree(Z, Tl, Tr)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 7.2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
encode_list([], [], _).
encode_list([X|R], [Ex|Er], T) :- encode_elem(X, Ex, T), encode_list(R, Er, T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							Ej 8
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dictionary([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]).

encode(L1, L2) :- dictionary(D), list_count(D, L1, CD), sort_list(CD, OCD), invierte(OCD, IOCD), build_tree(IOCD , Tree), encode_list(L1, L2, Tree).








